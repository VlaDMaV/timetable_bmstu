import { api } from "@/lib/api";
import type { DayboardRow } from "@/types";
import { toRu } from "@/lib/groupNames";
import { getISOWeek, getCurrentOrd } from "@/lib/week";
import { WEEKDAY_ORDER, WEEKDAYS_RU } from "@/lib/weekdays";
import { getLessonNumber } from "@/lib/lessons";

export const dynamic = "force-dynamic";

async function getSchedule(group: string, ord: "0" | "1") {
  const qs = new URLSearchParams({ group, ord }).toString();
  return api<DayboardRow[]>(`/dayboard/filter?${qs}`);
}

type ByPod = Record<number /* podgroup */, DayboardRow[]>;

function sortByLesson(arr: DayboardRow[]) {
  return [...arr].sort((a, b) => {
    const na = getLessonNumber(a.start_time);
    const nb = getLessonNumber(b.start_time);
    if (na !== nb) return na - nb;
    return a.start_time.localeCompare(b.start_time);
  });
}

/** –ï—Å–ª–∏ –≤ –¥–Ω–µ –µ—Å—Ç—å –ø–æ–¥–≥—Ä—É–ø–ø–∞ 0 + (1 –∏–ª–∏ 2) ‚Äî —Å—Ç—Ä–æ–∏–º –¥–≤–∞ —Å–ø–∏—Å–∫–∞:
 *  list1 = 0 ‚à™ 1, list2 = 0 ‚à™ 2, –æ–±–∞ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –ø–æ –Ω–æ–º–µ—Ä—É –ø–∞—Ä—ã.
 */
function splitOrSingle(byPod: ByPod) {
  const pg0 = byPod[0] ?? [];
  const pg1 = byPod[1] ?? [];
  const pg2 = byPod[2] ?? [];

  if (pg0.length > 0 && (pg1.length > 0 || pg2.length > 0)) {
    return {
      mode: "split" as const,
      list1: sortByLesson([...pg0, ...pg1]),
      list2: sortByLesson([...pg0, ...pg2]),
    };
  }

  if (pg0.length === 0 && (pg1.length > 0 || pg2.length > 0)) {
    if (pg1.length > 0 && pg2.length > 0) {
      return {
        mode: "split" as const,
        list1: sortByLesson([...pg1]),
        list2: sortByLesson([...pg2]),
      };
    }
    const only = pg1.length > 0 ? pg1 : pg2;
    return { mode: "single" as const, list: sortByLesson([...only]) };
  }

  return { mode: "single" as const, list: sortByLesson([...pg0]) };
}

export default async function SchedulePage({
  searchParams,
}: {
  searchParams: { group?: string; ord?: string };
}) {
  const group = searchParams.group;
  const autoOrd = String(getCurrentOrd()) as "0" | "1";
  const ordParam = (searchParams.ord ?? autoOrd) as "0" | "1";

  if (!group) {
    return (
      <main className="min-h-screen bg-gray-900 text-gray-100 p-6">
        <div className="max-w-4xl mx-auto">
          <a
            href="/groups"
            className="inline-block mb-6 px-4 py-2 rounded-xl border border-gray-700 text-gray-300 hover:bg-gray-800 hover:text-white transition"
          >
            ‚Üê –ö –≤—ã–±–æ—Ä—É –≥—Ä—É–ø–ø—ã
          </a>
          <h1 className="text-2xl font-bold">–ù–µ –≤—ã–±—Ä–∞–Ω–∞ –≥—Ä—É–ø–ø–∞</h1>
          <p className="text-gray-400">–ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤—ã–±–æ—Ä–∞ –≥—Ä—É–ø–ø—ã.</p>
        </div>
      </main>
    );
  }

  const rows = await getSchedule(group, ordParam);
  const groupRu = toRu(group);

  // === –ù–æ–º–µ—Ä –Ω–µ–¥–µ–ª–∏ –∏ –ø–æ–¥–ø–∏—Å–∏ ===
  const isEven = ordParam === "0"; // 0 ‚Äî —á—ë—Ç–Ω–∞—è (–ó–Ω–∞–º–µ–Ω–∞—Ç–µ–ª—å)
  const baseWeek = getISOWeek() - 35; // —Å–º–µ—â–µ–Ω–∏–µ –Ω–∞ –Ω–∞—á–∞–ª–æ —Å–µ–º–µ—Å—Ç—Ä–∞
  const isCurrentWeek = ordParam === autoOrd;
  const weekNo = (baseWeek > 0 ? baseWeek : 1) + (isCurrentWeek ? 0 : 1);
  const ordLabel = isEven ? "–ó–Ω–∞–º–µ–Ω–∞—Ç–µ–ª—å" : "–ß–∏—Å–ª–∏—Ç–µ–ª—å";

  // === –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø—Ä–∞–≤–æ–π –∫–Ω–æ–ø–∫–∏ ===
  const flippedOrd = ordParam === "0" ? "1" : "0";
  const rightBtnHref = isCurrentWeek
    ? `/schedule?group=${encodeURIComponent(group)}&ord=${flippedOrd}`
    : `/schedule?group=${encodeURIComponent(group)}&ord=${autoOrd}`;
  const rightBtnLabel = isCurrentWeek
    ? "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é –Ω–µ–¥–µ–ª—é ‚Üí"
    : "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —ç—Ç—É –Ω–µ–¥–µ–ª—é ‚Üí";
  const rightBtnTitle = isCurrentWeek
    ? "–ü–æ–∫–∞–∑–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é –Ω–µ–¥–µ–ª—é"
    : "–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é –Ω–∞ —Ç–µ–∫—É—â—É—é –Ω–µ–¥–µ–ª—é";

  // === –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞: –¥–µ–Ω—å -> –ø–æ–¥–≥—Ä—É–ø–ø—ã ===
  const byDay: Record<string, ByPod> = {};
  for (const r of rows) {
    const day = r.day_name;
    const pg = r.podgroup ?? 0;
    byDay[day] ??= {};
    byDay[day][pg] ??= [];
    byDay[day][pg].push(r);
  }

  return (
    <main className="min-h-screen bg-gray-900 text-gray-100 p-6">
      <div className="max-w-5xl mx-auto">
        {/* ===== –®–∞–ø–∫–∞ ===== */}
        <header className="mb-6">
          <div className="flex items-center justify-between">
            {/* –õ–µ–≤–∞—è: –Ω–∞–∑–∞–¥ (—Ñ–∏–∫—Å. —à–∏—Ä–∏–Ω–∞ –¥–ª—è –∏–¥–µ–∞–ª—å–Ω–æ–≥–æ —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–≥–æ–ª–æ–≤–∫–∞) */}
            <a
              href="/groups"
              className="px-4 py-2 rounded-xl border border-gray-700 text-gray-300 hover:bg-gray-800 hover:text-white transition w-[230px] text-center"
            >
              ‚Üê –ö –≤—ã–±–æ—Ä—É –≥—Ä—É–ø–ø—ã
            </a>

            {/* –¶–µ–Ω—Ç—Ä: –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Ä–æ–≤–Ω–æ –ø–æ —Ü–µ–Ω—Ç—Ä—É */}
            <h1 className="text-2xl font-bold text-center flex-1">
              –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –Ω–µ–¥–µ–ª—é
            </h1>

            {/* –ü—Ä–∞–≤–∞—è: –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∞—è –∫–Ω–æ–ø–∫–∞ */}
            <a
              href={rightBtnHref}
              className="px-4 py-2 rounded-xl border border-blue-700 bg-blue-600 text-white hover:bg-blue-700 transition w-[230px] text-center"
              title={rightBtnTitle}
            >
              {rightBtnLabel}
            </a>
          </div>

          <div className="mt-3 text-sm text-gray-300 text-center">
            –ì—Ä—É–ø–ø–∞: <span className="font-semibold">{groupRu}</span> ‚Ä¢ {weekNo} –Ω–µ–¥–µ–ª—è:{" "}
            <span className="font-semibold">{ordLabel}</span>
          </div>
        </header>

        {/* ===== –î–Ω–∏ –Ω–µ–¥–µ–ª–∏ –ø–æ –ø–æ—Ä—è–¥–∫—É (–ü–Ω ‚Üí –í—Å) ===== */}
        <div className="space-y-8">
          {WEEKDAY_ORDER.map((day) => {
            const byPod = byDay[day];
            if (!byPod) return null;

            const bucket = splitOrSingle(byPod);

            return (
              <section
                key={day}
                className="rounded-2xl border border-gray-700 bg-gray-800/40 p-4"
              >
                <h2 className="text-xl font-bold mb-4">üìÖ {WEEKDAYS_RU[day]}</h2>

                {bucket.mode === "single" && <DayLessons list={bucket.list} />}

                {bucket.mode === "split" && (
                  <div className="grid md:grid-cols-2 gap-6">
                    <div>
                      <div className="mb-3 font-semibold">üîπ –ü–æ–¥–≥—Ä—É–ø–ø–∞ 1</div>
                      <DayLessons list={bucket.list1} />
                    </div>
                    <div>
                      <div className="mb-3 font-semibold">üîπ –ü–æ–¥–≥—Ä—É–ø–ø–∞ 2</div>
                      <DayLessons list={bucket.list2} />
                    </div>
                  </div>
                )}
              </section>
            );
          })}
        </div>

        {rows.length === 0 && (
          <div className="mt-8 text-center text-gray-400">
            –î–ª—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ø–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.
          </div>
        )}
      </div>
    </main>
  );
}

/** –†–µ–Ω–¥–µ—Ä –∑–∞–Ω—è—Ç–∏–π –≤–Ω—É—Ç—Ä–∏ –¥–Ω—è (–Ω—É–º–µ—Ä–∞—Ü–∏—è –ø–æ LESSON_NUMBERS) */
function DayLessons({ list }: { list: DayboardRow[] }) {
  return (
    <ul className="space-y-4">
      {list.map((l) => {
        const n = getLessonNumber(l.start_time);
        const numLabel = n > 0 ? `${n} –ø–∞—Ä–∞` : "–ü–∞—Ä–∞";
        return (
          <li
            key={l.id}
            className="rounded-xl border border-gray-700 bg-gray-900/40 p-3"
          >
            <div className="font-semibold">
              üïí{numLabel} {l.start_time}‚Äì{l.end_time}
            </div>
            <div className="mt-1">
              {l.subject_name}{" "}
              <span className="text-gray-300">({l.type})</span>
            </div>
            <div className="mt-1 text-gray-300">
              üìç–ê—É–¥–∏—Ç–æ—Ä–∏—è: {l.place || "–ù–µ —É–∫–∞–∑–∞–Ω–æ"}
            </div>
            <div className="text-gray-300">
              –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å: {l.teacher_name || "–ù–µ —É–∫–∞–∑–∞–Ω"}
            </div>
          </li>
        );
      })}
    </ul>
  );
}
