import os
import pytz
import httpx
import logging
import asyncio
from math import ceil
from datetime import datetime

from aiogram import F, Router
from aiogram.filters import CommandStart
from aiogram.types import Message, CallbackQuery
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from sqlalchemy import create_engine
from sqlalchemy.orm import sessionmaker, declarative_base

from common.database import models
from config import config
import app.keyboards as kb
import app.text as cs
from app.utils.utils import format_timetable


logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

router = Router()


DB_USER = os.getenv("DB_USER", "postgres")
DB_PASSWORD = os.getenv("DB_PASSWORD", "postgres")
DB_NAME = os.getenv("DB_NAME", "timetable")
DB_HOST = os.getenv("DB_HOST", "localhost")
DB_PORT = os.getenv("DB_PORT", "5432")


DATABASE_URL = os.getenv(
    "DATABASE_URL",
    f"postgresql+psycopg2://{DB_USER}:{DB_PASSWORD}@{DB_HOST}:{DB_PORT}/{DB_NAME}"
)

engine = create_engine(DATABASE_URL)
SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)
Base = declarative_base()


def get_db():
    db = SessionLocal()
    try:
        yield db
    finally:
        db.close()


def get_group_keyboard() -> InlineKeyboardBuilder:
    kb = InlineKeyboardBuilder()
    with next(get_db()) as db:  
        groups = db.query(models.Group).order_by(models.Group.name).all()
        for group in groups:
            kb.button(text=cs.groups.get(group.name, group.name), callback_data=f"choose_group:{group.id}")
    kb.adjust(2)
    return kb.as_markup()


class BroadcastStates(StatesGroup):
    waiting_for_group_ids = State()
    waiting_for_message = State()


@router.message(CommandStart())
async def start(message: Message):
    db = next(get_db())
    
    tg_id = message.from_user.id
    chat_type = message.chat.type
    title = chat_type or "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"
    username = message.from_user.username or f"user_{tg_id}"

    if chat_type in ("group", "supergroup"):
        group_user = db.query(models.User).filter(models.User.tg_id == message.chat.id).first()
        if not group_user:

            new_group_user = models.User(
                tg_id=message.chat.id,
                username=username,
                title=title,
                group_id=None
            )
            db.add(new_group_user)
            db.commit()
            db.refresh(new_group_user)

            await message.answer(
                text=cs.reg_text.format(title=title),
                reply_markup=get_group_keyboard(),
                parse_mode="HTML"
            )
            return
        
        await message.answer(
            text=cs.welcome_text,
            parse_mode="HTML",
            reply_markup=kb.main_menu
        )

    else:
        user = db.query(models.User).filter(models.User.tg_id == tg_id).first()

        if not user:
            new_user = models.User(
                tg_id=tg_id,
                username=username,
                title=title,
                group_id=None
            )
            db.add(new_user)
            db.commit()
            db.refresh(new_user)

            await message.answer(
                text=cs.reg_text.format(title=title),
                reply_markup=get_group_keyboard()
            )
            return

        await message.answer(
            text=cs.welcome_text,
            parse_mode="HTML",
            reply_markup=kb.main_menu
        )


@router.callback_query(F.data == "help")
async def back_to_main(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    
    db = SessionLocal()
    try:
        user = db.query(models.User).filter(models.User.tg_id == callback.message.chat.id).first()

        if user and user.is_active:
            podpis_text = "üõë –æ—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç"
            reply_markup = kb.podpis_button_off
        else:
            podpis_text = "üü¢ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞"
            reply_markup = kb.podpis_button_on 

        await callback.message.edit_text(
            text=cs.help_text.format(podpis=podpis_text),
            parse_mode="HTML",
            reply_markup=reply_markup
        )
    finally:
        db.close()


@router.callback_query(F.data == "subscribe")
async def subscribe_user(callback: CallbackQuery):
    db = SessionLocal()
    try:
        user = db.query(models.User).filter(models.User.tg_id == callback.message.chat.id).first()
        if user:
            user.is_active = 1  
            db.commit()
            await callback.message.edit_text(
                "–í—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É ‚úÖ",
                reply_markup=kb.podpis_button_off
            )
        else:
            await callback.message.edit_text("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ –±–æ—Ç–µ.", parse_mode="HTML", reply_markup=kb.back_to_main)
    finally:
        db.close()


@router.callback_query(F.data == "unsubscribe")
async def unsubscribe_user(callback: CallbackQuery):
    if callback.message.chat.type != "private":
        await callback.answer("‚ùå –û—Ç–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö —Å –±–æ—Ç–æ–º.\n–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø–∏—Å–∞—Ç—å –≥—Ä—É–ø–ø—É –æ—Ç —Ä–∞—Å—Å—ã–ª–∫–∏, –Ω–∞–ø–∏—à–∏—Ç–µ @vladmav_11.", show_alert=True)
        return

    db = SessionLocal()
    try:
        user = db.query(models.User).filter(models.User.tg_id == callback.message.chat.id).first()
        if user:
            user.is_active = 0
            db.commit()
            await callback.message.edit_text(
                "–í—ã –æ—Ç–ø–∏—Å–∞–Ω—ã –æ—Ç —Ä–∞—Å—Å—ã–ª–∫–∏ üõë",
                
                reply_markup=kb.podpis_button_on
            )
        else:
            await callback.message.edit_text("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ –±–æ—Ç–µ.", parse_mode="HTML", reply_markup=kb.back_to_main)
    finally:
        db.close()


@router.callback_query(F.data == "back_to_main")
async def back_to_main(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.message.edit_text(
        text=cs.welcome_text, 
        parse_mode="HTML",
        reply_markup=kb.main_menu
    )


@router.callback_query(F.data.startswith("choose_group:"))
async def choose_group(callback: CallbackQuery):
    db = next(get_db())
    group_id = int(callback.data.split(":")[1])

    chosen_group = db.query(models.Group).filter(models.Group.id == group_id).first()
    if not chosen_group:
        await callback.answer("‚ùå –ì—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
        return

    if callback.message.chat.type in ("group", "supergroup"):
        user_group = db.query(models.User).filter(models.User.tg_id == callback.message.chat.id).first()
        if user_group:
            user_group.group_id = chosen_group.id
            db.commit()
            await callback.message.edit_text(
                f"‚úÖ –î–ª—è –≥—Ä—É–ø–ø—ã <b>{user_group.title}</b> –≤—ã–±—Ä–∞–Ω–∞ —É—á–µ–±–Ω–∞—è –≥—Ä—É–ø–ø–∞ <b>{cs.groups.get(chosen_group.name, chosen_group.name)}</b>",
                parse_mode="HTML",
                reply_markup=kb.back_to_main
            )
    else:
        user = db.query(models.User).filter(models.User.tg_id == callback.from_user.id).first()
        if user:
            user.group_id = chosen_group.id
            db.commit()
            await callback.message.edit_text(
                f"‚úÖ –í–∞—à–∞ —É—á–µ–±–Ω–∞—è –≥—Ä—É–ø–ø–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: <b>{cs.groups.get(chosen_group.name, chosen_group.name)}</b>",
                parse_mode="HTML",
                reply_markup=kb.back_to_main
            )

    await callback.answer()


@router.callback_query(F.data.startswith("timetable"))
async def get_today_timetable(callback: CallbackQuery):
    db = next(get_db())

    moscow_tz = pytz.timezone("Europe/Moscow")
    now = datetime.now(moscow_tz)
    year, week_number, weekday = now.isocalendar()
    week_ord = (week_number + 1) % 2

    if weekday == 7:
        await callback.message.edit_text(
            f"–°–µ–≥–æ–¥–Ω—è –≤—ã—Ö–æ–¥–Ω–æ–π! üí§",
            parse_mode="HTML",
            reply_markup=kb.back_to_main
        )
        return

    week_day = cs.WEEKDAYS.get(weekday)

    chat_id = callback.message.chat.id
    chat_type = callback.message.chat.type
    chat_title = callback.message.chat.title

    chat_record = db.query(models.User).filter(models.User.tg_id == chat_id).first()

    if not chat_record:
        await callback.message.edit_text(
            f"–≠—Ç–æ—Ç —á–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ.\n–ß–∞—Ç: {chat_title} ({chat_type})",
            parse_mode="HTML",
            reply_markup=kb.back_to_main
        )
        return

    if not chat_record.group_rel:
        await callback.message.edit_text(
            "–í–∞—à–∞ –≥—Ä—É–ø–ø–∞ –Ω–µ –≤—ã–±—Ä–∞–Ω–∞. –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É.",
            parse_mode="HTML",
            reply_markup=get_group_keyboard()
        )
        return

    current_group_name = chat_record.group_rel.name
    group_display_name = cs.groups.get(current_group_name, current_group_name)

    base_url = "http://backend:8000/dayboard/filter"
    params = {
        "ord": week_ord,
        "day": week_day,
        "group": current_group_name  
    }

    async with httpx.AsyncClient() as client:
        try:
            response = await client.get(base_url, params=params)
            response.raise_for_status()
            data = response.json()
        except httpx.HTTPError as e:
            await callback.message.edit_text(
                f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ API:\n{e}",
                parse_mode="HTML",
                reply_markup=kb.back_to_main
            )
            return

    timetable_text = format_timetable(data)

    await callback.message.edit_text(
        f"–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:\n\n{timetable_text}"
        f"–ì—Ä—É–ø–ø–∞: <b>{group_display_name}</b>\n"
        f"–ù–µ–¥–µ–ª—è: {'–ó–Ω–∞–º–µ–Ω–∞—Ç–µ–ª—å' if week_ord == 0 else '–ß–∏—Å–ª–∏—Ç–µ–ª—å'}",
        parse_mode="HTML",
        reply_markup=kb.back_to_main
    )


@router.callback_query(F.data.startswith("tomorrow_timetable"))
async def get_tomorrow_timetable(callback: CallbackQuery):
    db = next(get_db())

    moscow_tz = pytz.timezone("Europe/Moscow")
    now = datetime.now(moscow_tz)
    year, week_number, weekday = now.isocalendar()
    week_ord = (week_number + 1) % 2

    if weekday == 6: 
        await callback.message.edit_text(
            f"–ó–∞–≤—Ç—Ä–∞ –≤—ã—Ö–æ–¥–Ω–æ–π! üí§",
            parse_mode="HTML",
            reply_markup=kb.back_to_main
        )
        return
    elif weekday == 7:
        weekday = 1
    else:
        weekday += 1

    week_day = cs.WEEKDAYS.get(weekday)

    chat_id = callback.message.chat.id
    chat_type = callback.message.chat.type
    chat_title = callback.message.chat.title

    chat_record = db.query(models.User).filter(models.User.tg_id == chat_id).first()
    if not chat_record:
        await callback.message.edit_text(
            f"–≠—Ç–æ—Ç —á–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ.\n–ß–∞—Ç: {chat_title} ({chat_type})",
            parse_mode="HTML",
            reply_markup=kb.back_to_main
        )
        return

    if not chat_record.group_rel:
        await callback.message.edit_text(
            "–í–∞—à–∞ –≥—Ä—É–ø–ø–∞ –Ω–µ –≤—ã–±—Ä–∞–Ω–∞. –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É.",
            parse_mode="HTML",
            reply_markup=get_group_keyboard()
        )
        return

    current_group_name = chat_record.group_rel.name
    group_display_name = cs.groups.get(current_group_name, current_group_name)

    base_url = "http://backend:8000/dayboard/filter"
    params = {
        "ord": week_ord,
        "day": week_day,
        "group": current_group_name
    }

    async with httpx.AsyncClient() as client:
        try:
            response = await client.get(base_url, params=params)
            response.raise_for_status()
            data = response.json()
        except httpx.HTTPError as e:
            await callback.message.edit_text(
                f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ API:\n{e}",
                parse_mode="HTML",
                reply_markup=kb.back_to_main
            )
            return

    timetable_text = format_timetable(data)

    await callback.message.edit_text(
        f"–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞:\n\n{timetable_text}"
        f"–ì—Ä—É–ø–ø–∞: <b>{group_display_name}</b>\n"
        f"–ù–µ–¥–µ–ª—è: {'–ó–Ω–∞–º–µ–Ω–∞—Ç–µ–ª—å' if week_ord == 0 else '–ß–∏—Å–ª–∏—Ç–µ–ª—å'}",
        parse_mode="HTML",
        reply_markup=kb.back_to_main
    )


@router.callback_query(F.data.startswith("weekly_timetable"))
async def get_weekly_timetable(callback: CallbackQuery):
    db = next(get_db())

    moscow_tz = pytz.timezone("Europe/Moscow")
    now = datetime.now(moscow_tz)
    year, week_number, weekday = now.isocalendar()
    week_ord = (week_number + 1) % 2

    chat_id = callback.message.chat.id
    chat_type = callback.message.chat.type
    chat_title = callback.message.chat.title

    chat_record = db.query(models.User).filter(models.User.tg_id == chat_id).first()
    if not chat_record:
        await callback.message.edit_text(
            f"–≠—Ç–æ—Ç —á–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ.\n–ß–∞—Ç: {chat_title} ({chat_type})",
            parse_mode="HTML",
            reply_markup=kb.back_to_main
        )
        return

    if not chat_record.group_rel:
        await callback.message.edit_text(
            "–í–∞—à–∞ –≥—Ä—É–ø–ø–∞ –Ω–µ –≤—ã–±—Ä–∞–Ω–∞. –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É.",
            parse_mode="HTML",
            reply_markup=get_group_keyboard()
        )
        return

    current_group_name = chat_record.group_rel.name
    group_display_name = cs.groups.get(current_group_name, current_group_name)

    base_url = "http://backend:8000/dayboard/filter"
    params = {
        "ord": week_ord,
        "group": current_group_name 
    }

    async with httpx.AsyncClient() as client:
        try:
            response = await client.get(base_url, params=params)
            response.raise_for_status()
            data = response.json()
        except httpx.HTTPError as e:
            await callback.message.edit_text(
                f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ API:\n{e}",
                parse_mode="HTML",
                reply_markup=kb.back_to_main
            )
            return

    timetable_text = format_timetable(data)

    await callback.message.edit_text(
        f"–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –Ω–µ–¥–µ–ª—é:\n\n{timetable_text}"
        f"–ì—Ä—É–ø–ø–∞: <b>{group_display_name}</b>\n"
        f"–ù–µ–¥–µ–ª—è: {'–ó–Ω–∞–º–µ–Ω–∞—Ç–µ–ª—å' if week_ord == 0 else '–ß–∏—Å–ª–∏—Ç–µ–ª—å'}",
        parse_mode="HTML",
        reply_markup=kb.back_to_main
    )


@router.callback_query(F.data.startswith("current_lesson"))
async def current_lesson(callback: CallbackQuery):
    db = next(get_db())

    chat_id = callback.message.chat.id
    chat_record = db.query(models.User).filter(models.User.tg_id == chat_id).first()

    if not chat_record:
        await callback.message.edit_text(
            "–≠—Ç–æ—Ç —á–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ.",
            parse_mode="HTML",
            reply_markup=kb.back_to_main
        )
        return

    if not chat_record.group_rel:
        await callback.message.edit_text(
            "–í–∞—à–∞ –≥—Ä—É–ø–ø–∞ –Ω–µ –≤—ã–±—Ä–∞–Ω–∞. –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É.",
            parse_mode="HTML",
            reply_markup=get_group_keyboard()
        )
        return

    current_group_name = chat_record.group_rel.name

    moscow_tz = pytz.timezone("Europe/Moscow")
    now = datetime.now(moscow_tz)

    weekday_index = now.isoweekday()
    if weekday_index == 7:
        await callback.message.edit_text(
            "–°–µ–≥–æ–¥–Ω—è –≤—ã—Ö–æ–¥–Ω–æ–π! üí§",
            parse_mode="HTML",
            reply_markup=kb.back_to_main
        )
        return

    day_name = cs.WEEKDAYS.get(weekday_index, "Monday")

    week_ord = (now.isocalendar()[1] + 1) % 2

    base_url = "http://backend:8000/dayboard/filter"
    params = {"ord": week_ord, "day": day_name, "group": current_group_name}

    async with httpx.AsyncClient() as client:
        try:
            response = await client.get(base_url, params=params)
            response.raise_for_status()
            data = response.json()
        except httpx.HTTPError as e:
            await callback.message.edit_text(
                f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ API:\n{e}",
                parse_mode="HTML",
                reply_markup=kb.back_to_main
            )
            return

    if not data:
        await callback.message.edit_text(
            "–ù–∞ —Å–µ–≥–æ–¥–Ω—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø—É—Å—Ç–æ–µ.",
            parse_mode="HTML",
            reply_markup=kb.back_to_main
        )
        return

    now_time = now.time()
    current_lesson = None
    for lesson in data:
        start = datetime.strptime(lesson.get('start_time', '00:00'), "%H:%M").time()
        end = datetime.strptime(lesson.get('end_time', '00:00'), "%H:%M").time()
        if start <= now_time <= end:
            current_lesson = lesson
            break

    if current_lesson:
        text = (
            f"–¢–µ–∫—É—â–∞—è –ø–∞—Ä–∞:\n\n"
            f"{current_lesson.get('start_time', '??:??')}‚Äì{current_lesson.get('end_time', '??:??')}\n"
            f"{current_lesson.get('subject_name', '–ë–µ–∑ –ø—Ä–µ–¥–º–µ—Ç–∞')}\n"
            f"({current_lesson.get('type', '')})\n"
            f"–ê—É–¥–∏—Ç–æ—Ä–∏—è: {current_lesson.get('place', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
            f"–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å: {current_lesson.get('teacher_name', '–ù–µ —É–∫–∞–∑–∞–Ω')}"
        )
    else:
        text = "–°–µ–π—á–∞—Å –ø–∞—Ä—ã –Ω–µ—Ç. üí§"

    await callback.message.edit_text(text, parse_mode="HTML", reply_markup=kb.back_to_main)


@router.callback_query(F.data.startswith("change_group"))
async def change_group(callback: CallbackQuery):
    if callback.message.chat.type != "private":
        await callback.answer("‚ùå –°–º–µ–Ω–∞ –≥—Ä—É–ø–ø—ã –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö —Å –±–æ—Ç–æ–º.\n–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–º–µ–Ω–∏—Ç—å –≥—Ä—É–ø–ø—É –æ—Ç —Ä–∞—Å—Å—ã–ª–∫–∏, –Ω–∞–ø–∏—à–∏—Ç–µ @vladmav_11.", show_alert=True)
        return

    db = next(get_db())

    chat_id = callback.message.chat.id
    chat_record = db.query(models.User).filter(models.User.tg_id == chat_id).first()

    if not chat_record:
        await callback.message.edit_text(
            "–≠—Ç–æ—Ç —á–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ.",
            parse_mode="HTML",
            reply_markup=kb.back_to_main
        )
        return

    current_group_name = chat_record.group_rel.name if chat_record.group_rel else "–Ω–µ –≤—ã–±—Ä–∞–Ω–∞"

    await callback.message.edit_text(
        f"–¢–µ–∫—É—â–∞—è –≥—Ä—É–ø–ø–∞: <b>{cs.groups.get(current_group_name, current_group_name)}</b>\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é –≥—Ä—É–ø–ø—É:",
        parse_mode="HTML",
        reply_markup=get_group_keyboard()
    )


# –°—Ç–∞—Ä—Ç —Ä–∞—Å—Å—ã–ª–∫–∏ ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –≥—Ä—É–ø–ø—ã
@router.message(F.text == "/broadcast")
async def cmd_broadcast(message: Message, state: FSMContext):
    if message.from_user.id != config.admin_id:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    db = next(get_db())
    groups = db.query(models.Group).all()
    
    text = "–°–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø:\n"
    for g in groups:
        text += f"{g.id} ‚Äî {g.name}\n"

    text += "\n–í–≤–µ–¥–∏ ID –≥—Ä—É–ø–ø —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é:"
    await message.answer(text)
    await state.set_state(BroadcastStates.waiting_for_group_ids)


@router.message(BroadcastStates.waiting_for_group_ids)
async def get_group_ids(message: Message, state: FSMContext):
    if message.from_user.id != config.admin_id:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    try:
        ids = [int(x.strip()) for x in message.text.split(",")]
    except ValueError:
        await message.answer("–û—à–∏–±–∫–∞: –≤–≤–µ–¥–∏ ID —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1,2,3)")
        return

    await state.update_data(group_ids=ids)
    await message.answer("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:")
    await state.set_state(BroadcastStates.waiting_for_message)


@router.message(BroadcastStates.waiting_for_message)
async def get_broadcast_message(message: Message, state: FSMContext):
    if message.from_user.id != config.admin_id:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    data = await state.get_data()
    group_ids = data["group_ids"]
    text = message.text

    db = next(get_db())
    users = db.query(models.User).filter(models.User.group_id.in_(group_ids)).all()

    sent_count = 0
    for user in users:
        try:
            await message.bot.send_message(user.tg_id, text)
            sent_count += 1
        except Exception as e:
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å {user.tg_id}: {e}")

    await message.answer(f"–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ ‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {sent_count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.")
    await state.clear()


@router.message()
async def catch_all_messages(message: Message):
    await message.answer(
            text=cs.welcome_text,
            parse_mode="HTML",
            reply_markup=kb.main_menu
        )
